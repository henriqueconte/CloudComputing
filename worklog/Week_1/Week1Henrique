### Setup

First, I had to install the software and make it run. Since I'm using a Macbook, the suggested step-by-step didn't work as expected.  

To install QEMU, I used Homebrew and that worked perfectly. However, to install ARM, I first downloaded the .pkg from the official website, and this created a folder in my Applications folder. I tried to run the Makefile then, but it couldn't find the arm files. 

Even though I changed the path to allow it to find the arm files, it still wouldn't work. Therefore, what worked for me was a solution hidden in Stack Overflow that showed a package we could install with Homebrew that worked. 


### Week 1, step 1

The VAB (Versatile Application Board) has a arm926 CPU, and 1MB of memory. In the other hand, the VPB (Versatile Platform Board) 
has a Cortex-a8 CPU and 32MB of memory.

I was able to compile the VPB board, but the VAP didn't work for me initially. To make it work, I had to ... 

A linker script is used to set up a memory map for the application, allocating RAM, disk space for I/O and registers. Then, the linker script sets up a memory map of this allocation that manages the chip. 

The bss section, also called as Block Starting Symbol, is contains static variables that haven't an assigned value yet. Since the variables don't have an initial value, the object file size is smaller. Besides, since there is no data in the bss section, the compiler puts variables in the segment because they should be zero-initialized.

In embedded systems, the bss section is mapped into memory, which is set to zero by the C run-time system before the main method begins to run. In C, static objects are initialized to zero or to null pointers. 

Therefore, when the OS loads the executable, it gets the bss section size, allocates the necessary memory for it and initialize it with zeros.

To add support for kprintf, we have first to implement the method "kputchar" to send a char via the uart. Then, we need to add it to the Makefile on the object file list.

###########################################

Alignment refers to a piece of data's address location in memory. By having a 16-byte boundary, we are saying that the data memory address needs to divisible by 16. For example, 0x00010 would be 16-byte alligned, while 0x00011 wouldn't. The bss section is aligned on a 16-byte boundary because we zero 16-bytes at a time, as we can see in the ".clear" part from the reset.s file.

By running the command info mtree with the VPB board, I got the following result:

address-space: lsi-pci-io
  0000000043000000-0000000142ffffff (prio 0, i/o): pci_io

address-space: versatile_pci_host
  0000000000000000-ffffffffffffffff (prio 0, i/o): bus master container

address-space: cpu-memory-0
address-space: memory
address-space: pl080-downstream
  0000000000000000-ffffffffffffffff (prio 0, i/o): system
    0000000000000000-0000000001ffffff (prio 0, ram): versatile.ram
    0000000010000000-0000000010000fff (prio 0, i/o): arm-sysctl
    0000000010001000-0000000010001fff (prio 0, i/o): pci-vpb-regs
    0000000010002000-0000000010002fff (prio 0, i/o): arm_sbcon_i2c
    0000000010003000-0000000010003fff (prio 0, i/o): vpb-sic
    0000000010004000-0000000010004fff (prio 0, i/o): pl041
    0000000010005000-0000000010005fff (prio 0, i/o): pl181
    0000000010006000-0000000010006fff (prio 0, i/o): pl050
    0000000010007000-0000000010007fff (prio 0, i/o): pl050
    0000000010009000-0000000010009fff (prio 0, i/o): pl011
    000000001000b000-000000001000bfff (prio 0, i/o): pl181
    0000000010010000-000000001001000f (prio 0, i/o): smc91c111-mmio
    0000000010120000-0000000010120fff (prio 0, i/o): pl110
    0000000010130000-0000000010130fff (prio 0, i/o): pl080
    0000000010140000-0000000010140fff (prio 0, i/o): pl190
    00000000101e2000-00000000101e2fff (prio 0, i/o): sp804
    00000000101e3000-00000000101e3fff (prio 0, i/o): sp804
    00000000101e4000-00000000101e4fff (prio 0, i/o): pl061
    00000000101e5000-00000000101e5fff (prio 0, i/o): pl061
    00000000101e6000-00000000101e6fff (prio 0, i/o): pl061
    00000000101e7000-00000000101e7fff (prio 0, i/o): pl061
    00000000101e8000-00000000101e8fff (prio 0, i/o): pl031
    00000000101f1000-00000000101f1fff (prio 0, i/o): pl011
    00000000101f2000-00000000101f2fff (prio 0, i/o): pl011
    00000000101f3000-00000000101f3fff (prio 0, i/o): pl011
    0000000034000000-0000000037ffffff (prio 0, romd): versatile.flash
    0000000041000000-0000000041ffffff (prio 0, i/o): pci-vpb-selfconfig
    0000000042000000-0000000042ffffff (prio 0, i/o): pci-vpb-config
    0000000043000000-0000000142ffffff (prio 0, i/o): pci_io
    0000000044000000-000000004fffffff (prio 0, i/o): alias pci-vbp-window @pci_mem 0000000000000000-000000000bffffff
    0000000050000000-000000005fffffff (prio 0, i/o): alias pci-vbp-window @pci_mem 0000000000000000-000000000fffffff
    0000000060000000-000000006fffffff (prio 0, i/o): alias pci-vbp-window @pci_mem 0000000000000000-000000000fffffff

address-space: lsi53c895a
  0000000000000000-ffffffffffffffff (prio 0, i/o): bus master container

address-space: I/O
  0000000000000000-000000000000ffff (prio 0, i/o): io

memory-region: system
  0000000000000000-ffffffffffffffff (prio 0, i/o): system
    0000000000000000-0000000001ffffff (prio 0, ram): versatile.ram
    0000000010000000-0000000010000fff (prio 0, i/o): arm-sysctl
    0000000010001000-0000000010001fff (prio 0, i/o): pci-vpb-regs
    0000000010002000-0000000010002fff (prio 0, i/o): arm_sbcon_i2c
    0000000010003000-0000000010003fff (prio 0, i/o): vpb-sic
    0000000010004000-0000000010004fff (prio 0, i/o): pl041
    0000000010005000-0000000010005fff (prio 0, i/o): pl181
    0000000010006000-0000000010006fff (prio 0, i/o): pl050
    0000000010007000-0000000010007fff (prio 0, i/o): pl050
    0000000010009000-0000000010009fff (prio 0, i/o): pl011
    000000001000b000-000000001000bfff (prio 0, i/o): pl181
    0000000010010000-000000001001000f (prio 0, i/o): smc91c111-mmio
    0000000010120000-0000000010120fff (prio 0, i/o): pl110
    0000000010130000-0000000010130fff (prio 0, i/o): pl080
    0000000010140000-0000000010140fff (prio 0, i/o): pl190
    00000000101e2000-00000000101e2fff (prio 0, i/o): sp804
    00000000101e3000-00000000101e3fff (prio 0, i/o): sp804
    00000000101e4000-00000000101e4fff (prio 0, i/o): pl061
    00000000101e5000-00000000101e5fff (prio 0, i/o): pl061
    00000000101e6000-00000000101e6fff (prio 0, i/o): pl061
    00000000101e7000-00000000101e7fff (prio 0, i/o): pl061
    00000000101e8000-00000000101e8fff (prio 0, i/o): pl031
    00000000101f1000-00000000101f1fff (prio 0, i/o): pl011
    00000000101f2000-00000000101f2fff (prio 0, i/o): pl011
    00000000101f3000-00000000101f3fff (prio 0, i/o): pl011
    0000000034000000-0000000037ffffff (prio 0, romd): versatile.flash
    0000000041000000-0000000041ffffff (prio 0, i/o): pci-vpb-selfconfig
    0000000042000000-0000000042ffffff (prio 0, i/o): pci-vpb-config
    0000000043000000-0000000142ffffff (prio 0, i/o): pci_io
    0000000044000000-000000004fffffff (prio 0, i/o): alias pci-vbp-window @pci_mem 0000000000000000-000000000bffffff
    0000000050000000-000000005fffffff (prio 0, i/o): alias pci-vbp-window @pci_mem 0000000000000000-000000000fffffff
    0000000060000000-000000006fffffff (prio 0, i/o): alias pci-vbp-window @pci_mem 0000000000000000-000000000fffffff

memory-region: pci_mem
  0000000000000000-00000000ffffffff (prio 0, i/o): pci_mem

This command shows a mapping of the system memory to different devices. 


###### Week 1, step 2

To debug with GDB, I spent almost three hours trying to understand how remote debugging works. The step-by-step that finally worked for me was:

1. Open two terminal tabs
2. In the first one, run "make debug"
3. In the second one, run "sudo arm-none-eabi-gdb kernel.elf"
4. In the second one, run "break _reset"
5. In the second one, run "target remote:1234"
6. In the second one, run "run"

Then, in the second terminal, we can see that the execution will stop on the line 11 from the "reset" file. This line belongs to the "clear" section, which means we will first clean the memory, assign 0 to the memory addresses and then load the "main" file.

If we remove the periodic "Zzzz" output, we won't know the program is still running. The output was there to show that the program is being executed, and it is printed everytime the variable "count" reaches 10000000. This gives us the impression that the program is sleeping for a second and then printing, but the program is actually continously running and adding 1 to the count value, and then printing "Zzzz" when count reaches 10000000.

The symbol _stack_top is used to reference the top element of the stack. In our case, we are reserving memory for our C stack and then loading the C file (main) entry point. The stack growns downward, which means the top of the stack is at the end of the reserved memory region.

We can verify in C that the stack is working properly by being able to execute the program without running out of memory. The "Zzzzz" print is useful for that, because if we are printing "Zzzzz" that means that everything is good with the stack. 

However, if we call too many functions in C, we won't have enough memory in the stack region to run everything. This also happens if we declare way too big variables, like an array with 1 million of integers, we won't have memory in the data region.

Regarding the safety of C programs, it is important to mention that C is an unsafe programming language. If we execute an incorrect operation, the whole program becomes meaningless, having a undefined behavior. Since the compiler doesn't provide diagnostic for undefined behavior, we are susceptible to security vulnerabilities. 

We can verify the program C executes safely by using multiple validation approaches. First, the simplest and most obvious approach is to run the program multiple times with different inputs, trying to cover basic to edge cases. This may detect the presence of errors, but it can't prove its absence.

Another approach is to have code reviews whenever new code is written. This means that another person will review and run the proposed code, increasing the chances of finding wrong behaviors and bad written code. This also allows us to enforce the usage of good programming practies, that strongly reduce the existence of unsafe code.

Besides, another approach is to use static code analysis tools. Those tools can, for example, detect unitialized variables that may result in a bad execution afterwards. 

Last, it is also possible to provide a formal verification that the C program executes safely. In some companies, they use functional safety standards such as ISO 26262-6. However, the approach depends on the company needs, so there is not a unique way of ensuring safety. 


The method kprintf is the same as a "printf" but on a kernel version. Since we don't have libC on bare-metal environment, we can't simply use "printf", thus kprintf was implemented. 



############ Week 1 Step 3

UART, that stands for Universal Asynchronous Receiver-Transmitter, is a protocol allowing to send or receive bytes in an asynchronous serial communication. In that type of communication, data is transferred bit by bit with one line.

UART is widely used for embedded systems and microcontrollers, and it uses two wires to send and receive. The two signals are called Transmitter and Receiver. A transmitter receives data from a controlling data bus in parallel form, and sends to another UART in serial form. Then, the second UART sends the data to another data bus in parallel form. 

The information is transmitted in packets that contain a start bit (1 bit), a data frame (5 to 9 bits), parity bits (0 to 1 bits) and stop bits (1 to 2 bits). The start bit decides when the UART should start reading the data frame bits. The data frame contains the information from the package. The parity bits is used to identify if any data was modified during transmission, happening in case of electromagnetic interefence. The stop bits indicate the end of the package. 

In addition, UARTs have registers used to configure communication parameters, like the communication speed and parity check. In that aspect, 8 bytes are used to access a UART's registers. The offsets are used to access the right register, because we always need a base address plus an offset. 

Bit fields in C are variables with predefined width, and the easiest way to understand bit fields is with an example. Let's say we have the following structure:

struct {
    unsigned int age : 3;
} Age; 

Note the " : 3". Normally, the program would allocate 4 bytes for the variable "age", since it's a unsigned int. However, if we don't want to allocate that much memory for a variable, we can use bit fields to define the amount of bits we want to allocate to that variable. In that case, we use " : 3" to say that we want to allocate 3 bits for the variable age. That means we could only have ages from 0 to 7 - which is quite low -, but it's enough to understand the concept of bit fields.
 
The command "info qtree" from QEMU shows a tree view of how all the QEMU devices are By running the command "info qtree" on QEMU, we get the following result: 

bus: main-system-bus
  type System
  dev: cfi.pflash01, id ""
    drive = ""
    num-blocks = 256 (0x100)
    sector-length = 262144 (0x40000)
    width = 4 (0x4)
    device-width = 0 (0x0)
    max-device-width = 0 (0x0)
    big-endian = false
    secure = false
    id0 = 137 (0x89)
    id1 = 24 (0x18)
    id2 = 0 (0x0)
    id3 = 0 (0x0)
    name = "versatile.flash"
    old-multiple-chip-handling = false
    mmio 0000000034000000/0000000004000000
  dev: pl041, id ""
    gpio-out "sysbus-irq" 1
    audiodev = "coreaudio"
    nc_fifo_depth = 512 (0x200)
    mmio 0000000010004000/0000000000001000
  dev: versatile_i2c, id ""
    mmio 0000000010002000/0000000000001000
    bus: i2c
      type i2c-bus
      dev: ds1338, id ""
        address = 104 (0x68)
  dev: pl031, id ""
    gpio-out "sysbus-irq" 1
    migrate-tick-offset = true
    mmio 00000000101e8000/0000000000001000
  dev: pl181, id ""
    gpio-out "card-inserted" 1
    gpio-out "card-read-only" 1
    gpio-out "sysbus-irq" 2
    mmio 000000001000b000/0000000000001000
    bus: sd-bus
      type pl181-bus
  dev: pl181, id ""
    gpio-out "card-inserted" 1
    gpio-out "card-read-only" 1
    gpio-out "sysbus-irq" 2
    mmio 0000000010005000/0000000000001000
    bus: sd-bus
      type pl181-bus
      dev: sd-card, id ""
        spec_version = 2 (0x2)
        drive = "sd0"
        spi = false
  dev: pl110_versatile, id ""
    gpio-in "" 1
    gpio-out "sysbus-irq" 1
    mmio 0000000010120000/0000000000001000
  dev: pl061, id ""
    gpio-in "" 8
    gpio-out "" 8
    gpio-out "sysbus-irq" 1
    pullups = 255 (0xff)
    pulldowns = 0 (0x0)
    mmio 00000000101e7000/0000000000001000
  dev: pl061, id ""
    gpio-in "" 8
    gpio-out "" 8
    gpio-out "sysbus-irq" 1
    pullups = 255 (0xff)
    pulldowns = 0 (0x0)
    mmio 00000000101e6000/0000000000001000
  dev: pl061, id ""
    gpio-in "" 8
    gpio-out "" 8
    gpio-out "sysbus-irq" 1
    pullups = 255 (0xff)
    pulldowns = 0 (0x0)
    mmio 00000000101e5000/0000000000001000
  dev: pl061, id ""
    gpio-in "" 8
    gpio-out "" 8
    gpio-out "sysbus-irq" 1
    pullups = 255 (0xff)
    pulldowns = 0 (0x0)
    mmio 00000000101e4000/0000000000001000
  dev: sp804, id ""
    gpio-out "sysbus-irq" 1
    freq0 = 1000000 (0xf4240)
    freq1 = 1000000 (0xf4240)
    mmio 00000000101e3000/0000000000001000
  dev: sp804, id ""
    gpio-out "sysbus-irq" 1
    freq0 = 1000000 (0xf4240)
    freq1 = 1000000 (0xf4240)
    mmio 00000000101e2000/0000000000001000
  dev: pl080, id ""
    gpio-out "sysbus-irq" 3
    mmio 0000000010130000/0000000000001000
  dev: pl011, id ""
    gpio-out "sysbus-irq" 6
    clock-in "clk" freq_hz=0 Hz
    chardev = ""
    migrate-clk = true
    mmio 0000000010009000/0000000000001000
  dev: pl011, id ""
    gpio-out "sysbus-irq" 6
    clock-in "clk" freq_hz=0 Hz
    chardev = ""
    migrate-clk = true
    mmio 00000000101f3000/0000000000001000
  dev: pl011, id ""
    gpio-out "sysbus-irq" 6
    clock-in "clk" freq_hz=0 Hz
    chardev = ""
    migrate-clk = true
    mmio 00000000101f2000/0000000000001000
  dev: pl011, id ""
    gpio-out "sysbus-irq" 6
    clock-in "clk" freq_hz=0 Hz
    chardev = "serial0"
    migrate-clk = true
    mmio 00000000101f1000/0000000000001000
  dev: smc91c111, id ""
    gpio-out "sysbus-irq" 1
    mac = "52:54:00:12:34:56"
    netdev = "hub0port0"
    mmio 0000000010010000/0000000000000010
  dev: versatile_pci, id ""
    gpio-out "sysbus-irq" 4
    broken-irq-mapping = 0 (0x0)
    x-config-reg-migration-enabled = true
    bypass-iommu = false
    mmio 0000000010001000/0000000000001000
    mmio 0000000041000000/0000000001000000
    mmio 0000000042000000/0000000001000000
    mmio 0000000043000000/0000000100000000
    mmio 0000000044000000/000000000c000000
    mmio 0000000050000000/0000000010000000
    mmio 0000000060000000/0000000010000000
    bus: pci
      type PCI
      dev: lsi53c895a, id ""
        gpio-out "" 1
        addr = 0c.0
        romfile = ""
        romsize = 4294967295 (0xffffffff)
        rombar = 1 (0x1)
        multifunction = false
        x-pcie-lnksta-dllla = true
        x-pcie-extcap-init = true
        failover_pair_id = ""
        acpi-index = 0 (0x0)
        class SCSI controller, addr 00:0c.0, pci id 1000:0012 (sub 0000:1000)
        bar 0: i/o at 0xffffffffffffffff [0xfe]
        bar 1: mem at 0xffffffffffffffff [0x3fe]
        bar 2: mem at 0xffffffffffffffff [0x1ffe]
        bus: scsi.0
          type SCSI
          dev: scsi-cd, id ""
            drive = "scsi0-cd2"
            backend_defaults = "auto"
            logical_block_size = 512 (512 B)
            physical_block_size = 512 (512 B)
            min_io_size = 0 (0 B)
            opt_io_size = 0 (0 B)
            discard_granularity = 4096 (4 KiB)
            write-cache = "auto"
            share-rw = false
            rerror = "auto"
            werror = "auto"
            ver = "2.5+"
            serial = ""
            vendor = "QEMU"
            product = "QEMU CD-ROM"
            device_id = "scsi0-cd2"
            wwn = 0 (0x0)
            port_wwn = 0 (0x0)
            port_index = 0 (0x0)
            max_io_size = 2147483647 (0x7fffffff)
            scsi_version = 5 (0x5)
            quirk_mode_page_apple_vendor = false
            quirk_mode_sense_rom_use_dbd = false
            quirk_mode_page_vendor_specific_apple = false
            quirk_mode_page_truncated = false
            channel = 0 (0x0)
            scsi-id = 2 (0x2)
            lun = 0 (0x0)
      dev: versatile_pci_host, id ""
        addr = 0b.0
        romfile = ""
        romsize = 4294967295 (0xffffffff)
        rombar = 1 (0x1)
        multifunction = false
        x-pcie-lnksta-dllla = true
        x-pcie-extcap-init = true
        failover_pair_id = ""
        acpi-index = 0 (0x0)
        class Class 0b40, addr 00:0b.0, pci id 10ee:0300 (sub 1af4:1100)
  dev: ps2-mouse, id ""
    gpio-out "" 1
  dev: pl050_mouse, id ""
    gpio-in "ps2-input-irq" 1
    gpio-out "sysbus-irq" 1
    mmio 0000000010007000/0000000000001000
  dev: ps2-kbd, id ""
    gpio-out "" 1
  dev: pl050_keyboard, id ""
    gpio-in "ps2-input-irq" 1
    gpio-out "sysbus-irq" 1
    mmio 0000000010006000/0000000000001000
  dev: versatilepb_sic, id ""
    gpio-out "sysbus-irq" 32
    gpio-in "" 32
    mmio 0000000010003000/0000000000001000
  dev: pl190, id ""
    gpio-out "sysbus-irq" 2
    gpio-in "" 32
    mmio 0000000010140000/0000000000001000
  dev: realview_sysctl, id ""
    gpio-in "" 2
    gpio-out "" 1
    sys_id = 1090547716 (0x41007004)
    proc_id = 33554432 (0x2000000)
    len-db-voltage = 0 (0x0)
    len-db-clock = 0 (0x0)
    mmio 0000000010000000/0000000000001000

To make QEMU emulate a second serial, first we need to change the QEMU_SERIAL on the Makefile. The original QEMU_SERIAL has a value of "-serial mon:stdio", which will run with with one serial line and one IDE disk. To create a telnet connection, we need to add the value " -serial telnet:localhost:4321,server,nowait" to QEMU_SERIAL. 

Besides, on the "main.c" file we need to change the UART we will send the message. The initial UART is UART0, which is the QEMU console, so we need to change it to UART1, which will be the console we will connect to the 4321 port. 

Then, when we run "make run" again, our QEMU will create a telnet connection on the port 4321. In another terminal, we run "telnet localhost 4321". Now, we will see the message "Zzzzz" and the typed characeters being printed on the telnet terminal instead of the QEMU terminal - mission complete!

In C, unsigned char is a character datatype where the variable uses all the 8 bits of memory, and it doesn't contain a sign bit. We can use it to get ASCII values from 0 to 255 range.

When we type characters like 'a', 'b', 'A' and 'B' and we see their values on our telnet terminal. On the other hand, if we hit special keys like the left, right, up and down arrow, we won't see anything being printed on the terminal. This happens because the arrow keys don't have ASCII codes, because they didn't exist by the time ASCII codes where created. Therefore, if we wanted to send an arrow key information, we would need to manually encode them and send as a sequence of bytes.   

If we type an arrow key without encoding it, the cursor will move on the telnet terminal instead of printing a value. 

####### Week 1 Step 4

First, to clear the screen, I used kprintf to print characters to clean the screen. I found a suggestion of characters sequence on StackOverflow (https://stackoverflow.com/questions/60293014/how-to-clear-screen-of-minicom-terminal-using-serial-uart) and used it.

Then, to put the cursor at the top-left corner, I first discovered what is the sequence of bytes read by my computer when receiving a top arrow. To do this, I used kprintf("%d", c) to discover the number, and that gave me 279165. This mean that the sequence is 27, 91 and 65. Thus, if I use uart_send to send three numbers, and I send 27 91 and 65 in sequence, this will be interpreted as a top arrow by the terminal. Finally, I put that sequence of uart_send inside a for loop and iterated it by the default amount of lines from the terminal (25). 

The next step is to have the ability to write commands in the command line. First, to be able to write commands, I declared an empty char array with size 100. Then, for every key pressed by the user, I save the character in this array. Finally, to read the information from the array, I verify if the pressed key was "enter" (13), and then compare the current string with the strings "reset" and "echo".

To compare the strings, I created another class to encapsulate the logic of string comparation. Since we couldn't use "string.h" method "strcmp", I am comparing the strings manually. Since it's an obvious but laborious code, I just searched on the internet an algorithm to do it. 

Being able to detect the written string was "reset",  I called again the method to clean the screen. If the written string is "echo", I print it with kprintf and continue the program. In every case, when "enter" is pressed, I reset the command and go to a new line.

In order to delete characters when delete is pressed, I had to detect when the key "127" (delete) was pressed, move the cursor back with the command '\b' and write an empty char. 


References: 
https://users.informatik.haw-hamburg.de/~krabat/FH-Labor/gnupro/7_GNUPro_Embedded_Development/embThe_linker_script.html
https://en.wikipedia.org/wiki/.bss
http://books.gigatux.nl/mirror/kerneldevelopment/0672327201/ch19lev1sec3.html
https://www.geeksforgeeks.org/stack-top-c-stl/
https://blog.regehr.org/archives/213
https://www.mathworks.com/content/dam/mathworks/conference-or-academic-paper/how-to-prove-your-c-plus-plus-code-safe-secure.pdf
https://www.analog.com/en/analog-dialogue/articles/uart-a-hardware-communication-protocol.html
https://www.lammertbies.nl/comm/info/serial-uart
https://www.tutorialspoint.com/cprogramming/c_bit_fields.htm
https://www.geeksforgeeks.org/unsigned-char-in-c-with-examples/
https://stackoverflow.com/questions/60293014/how-to-clear-screen-of-minicom-terminal-using-serial-uart
https://www.geeksforgeeks.org/c-program-to-compare-two-strings-without-using-strcmp-function/








